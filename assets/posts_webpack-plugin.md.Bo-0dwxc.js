import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.CE7GJjuD.js";const l="/blog-vitepress/assets/compiler-compilation.y3o6l81l.jpg",e="/blog-vitepress/assets/webpack-plugin-template.Bk9VfqAI.jpg",u=JSON.parse('{"title":"webpack 插件开发指南","description":"","frontmatter":{},"headers":[],"relativePath":"posts/webpack-plugin.md","filePath":"posts/webpack-plugin.md","lastUpdated":1710790070000}'),p={name:"posts/webpack-plugin.md"},t=n('<h1 id="webpack-插件开发指南" tabindex="-1">webpack 插件开发指南 <a class="header-anchor" href="#webpack-插件开发指南" aria-label="Permalink to &quot;webpack 插件开发指南&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><strong>插件</strong> 是 webpack 的 <code>支柱</code> 功能。Webpack 自身也是构建于你在 webpack 配置中用到的 <strong>相同的插件系统</strong> 之上！</p><p>插件目的在于解决 <code>loader</code> 无法实现的<strong>其他事</strong>。Webpack 提供很多开箱即用的 <code>插件</code>。</p><p>插件接口允许用户直接介入编译过程。 插件可以在不同时期运行的生命周期挂钩上注册回调函数。 在单个编译流程中，当每个钩子都被执行后，插件将拥有 当前编译流程的完整访问权限。</p><h2 id="本质" tabindex="-1">本质 <a class="header-anchor" href="#本质" aria-label="Permalink to &quot;本质&quot;">​</a></h2><ul><li>插件其实就是一个 class 类，其中有一个 apply 方法，携带参数 compiler</li><li>主要通过监听 emit、done 这两个钩子</li><li>compiler.hooks.emit.tap 打包完成</li><li>compiler.hooks.done.tap 打包结束</li><li>主要能做的是侵入式修改打包结果</li></ul><h2 id="compiler-是什么" tabindex="-1">compiler 是什么 <a class="header-anchor" href="#compiler-是什么" aria-label="Permalink to &quot;compiler 是什么&quot;">​</a></h2><ul><li>构造函数初始化时，创建的一个对象</li><li>它作为 apply 方法的参数</li><li>有多个生命周期钩子事件可监听</li><li>贯穿整个整个生命周期（构建流程）</li></ul><h2 id="compilation-是什么" tabindex="-1">compilation 是什么 <a class="header-anchor" href="#compilation-是什么" aria-label="Permalink to &quot;compilation 是什么&quot;">​</a></h2><ul><li>由 compiler 创建的对象</li><li>负责具体的打包过程</li><li>它也有一些<strong>模块级别</strong>生命周期可监听，</li></ul><h2 id="关系图" tabindex="-1">关系图 <a class="header-anchor" href="#关系图" aria-label="Permalink to &quot;关系图&quot;">​</a></h2><p><img src="'+l+`" alt="compiler和compilation在构建流程中的作用关系图"></p><h2 id="简单的例子代码" tabindex="-1">简单的例子代码 <a class="header-anchor" href="#简单的例子代码" aria-label="Permalink to &quot;简单的例子代码&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apply 只在打包启动时执行一次&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听webpack的某某个生命周期，周期有20+</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // emit打包完成，done打包结束，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.emit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilation.assets);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 打包结束，操作dist文件夹，tip：开发环境没有dist文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.done.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 增删改其他的文件等...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyPlugin;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="编写及使用" tabindex="-1">编写及使用 <a class="header-anchor" href="#编写及使用" aria-label="Permalink to &quot;编写及使用&quot;">​</a></h2><p><img src="`+e+'" alt="编写及使用"></p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://webpack.docschina.org/concepts/plugins/" target="_blank" rel="noreferrer">webpack plugin</a></li><li><a href="https://webpack.docschina.org/api/compiler-hooks/" target="_blank" rel="noreferrer">插件 compiler 钩子</a></li></ul>',19),h=[t];function r(k,o,c,d,E,g){return i(),a("div",null,h)}const m=s(p,[["render",r]]);export{u as __pageData,m as default};
