import{_ as a,c as r,o as t,a4 as e}from"./chunks/framework.CE7GJjuD.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/浏览器渲染原理.md","filePath":"posts/浏览器渲染原理.md","lastUpdated":1700564272000}'),o={name:"posts/浏览器渲染原理.md"},p=e('<h2 id="浏览器是如何渲染页面的" tabindex="-1">浏览器是如何渲染页面的？ <a class="header-anchor" href="#浏览器是如何渲染页面的" aria-label="Permalink to &quot;浏览器是如何渲染页面的？&quot;">​</a></h2><p>网络进程： --通信(获取html创建渲染任务)---------------------------------------------------&gt;</p><p> 【 渲染任务 】（消息队列）</p><p>渲染主进程：-- 渲染-----------------------------------------------&gt;</p><p>当浏览器的网络进程接收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环的作用下，渲染主线程从消息队列中拿取渲染任务，开心渲染流程</p><p>整个渲染流程分为多个阶段，分别是：html解析、css计算、布局、分层、绘制、分块、光栅化、画</p><p>每个阶段都有明确的输入输出，上个阶段的输出会成为下个阶段的输入。</p><p>这样，整个 渲染流程就形成了一套组织严密的生产流水线。</p><h4 id="第一步-html-解析" tabindex="-1"><strong>第一步 HTML 解析</strong> <a class="header-anchor" href="#第一步-html-解析" aria-label="Permalink to &quot;**第一步 HTML 解析**&quot;">​</a></h4><p>解析过程中遇到 CSS 解析CSS，遇到 JS 执行JS。为了提高解析效率，浏览器在开始解析前，会启动一个与解析的线程，率先下载HTML 中的外部CSS文件和外部的JS 文件。</p><p>如果主线程解析到 link 位置，此时外部的 CSS 文件还没下载解析好，主线程不会等待，继续解析后续的HTML，这是因为下载和解析 CSS 的工作在预解析线程中进行的。这届是 CSS 不会阻塞渲染主线程 HTML解析的根本原因。</p><p>如果主线程解析到 <strong>script</strong> 位置，会停止解析HTML，转而等待 JS 文件下载好，并全局代码解析执行完成后，才能继续解析HTML。这是因为 JS 代码的执行中可能会修改当前的 DOM 树（不停下来等到知道会导致重绘），所以 DOM 树的生成必须暂停。这就是 JS 会阻塞HTML解析的原因。</p><p>第一步完成之后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在CSSOM 树中。</p><h4 id="第二步-样式计算" tabindex="-1"><strong>第二步 样式计算</strong> <a class="header-anchor" href="#第二步-样式计算" aria-label="Permalink to &quot;**第二步 样式计算**&quot;">​</a></h4><p>主线程会遍历得到 DOM树，依次为树中的每个节点计算出它最终样式，称之为 Computed Style 。</p><p>在这一过程中，有很多预设值会变成绝对值，比如 red 会变成 rgb(255, 0, 0)；相对单位会变成绝对单位，比如 em 会变成 px。</p><p>这一步完成后，会得到一颗带有样式的 DOM 树。</p><h4 id="第三步-布局-布局完成后会的得到布局树" tabindex="-1"><strong>第三步 布局，布局完成后会的得到布局树</strong> <a class="header-anchor" href="#第三步-布局-布局完成后会的得到布局树" aria-label="Permalink to &quot;**第三步 布局，布局完成后会的得到布局树**&quot;">​</a></h4><p>布局阶段会一次遍历DOM树的每一个节点，计算每个节点的几何信息，生成带有几何信息的布局树。例如节点的宽高、相对包含快的位置。</p><p>大部分时候。 DOM树和布局树并非一一对应。</p><p>比如 display：none的节点没有几何信息，因此不会生成到布局树中；又比如使用了伪元素选择器，虽然 DOM树不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中/还有匿名行盒、匿名块盒等等都会导致 DOM树和布局树无法一一对应。</p><h4 id="第四步-分层" tabindex="-1"><strong>第四步 分层</strong> <a class="header-anchor" href="#第四步-分层" aria-label="Permalink to &quot;**第四步 分层**&quot;">​</a></h4><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处，在于将来某一层发生改变时，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少影响分层结果，也可以同过 will-change属性更大程度影响主线程策略的分层结果。</p><h4 id="第五步-绘制" tabindex="-1"><strong>第五步 绘制</strong> <a class="header-anchor" href="#第五步-绘制" aria-label="Permalink to &quot;**第五步 绘制**&quot;">​</a></h4><p>主线程会为每个分层单独产生<strong>绘制指令集</strong>，用于描述这一层的内容如何画出来。</p><p>绘制完成后，主线程将每个图层的绘制信息提交给**合并线程，**将剩余工作由合成线程完成。</p><h4 id="第六步-分块" tabindex="-1"><strong>第六步 分块</strong> <a class="header-anchor" href="#第六步-分块" aria-label="Permalink to &quot;**第六步 分块**&quot;">​</a></h4><p>合成线程首先对每个图层进行分块，将其划分更多小区域。</p><p>它会从线程池中拿取多个线程来完成分块工作。</p><h4 id="第七步-光栅化阶段" tabindex="-1"><strong>第七步 光栅化阶段</strong> <a class="header-anchor" href="#第七步-光栅化阶段" aria-label="Permalink to &quot;**第七步 光栅化阶段**&quot;">​</a></h4><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p><p>光栅化结果，就是一块一块的位图（每个像素点的颜色）。</p><h4 id="最后一步-画" tabindex="-1"><strong>最后一步</strong> <strong>画</strong> <a class="header-anchor" href="#最后一步-画" aria-label="Permalink to &quot;**最后一步** **画**&quot;">​</a></h4><p>合成线程拿到每个层、每个块的位图后，生成一个一个【指引（quad）】信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染线程无关，这也是 tranform 效率高的本质元婴。</p><p>合成线程会把 quad 提交给 GPU进程，有GPU 进程去系统调用，提交给GPU硬件，完成最终的屏幕成像。</p><h2 id="什么是-reflow" tabindex="-1"><strong>什么是 reflow？</strong> <a class="header-anchor" href="#什么是-reflow" aria-label="Permalink to &quot;**什么是 reflow？**&quot;">​</a></h2><p>reflow 的本质就是重新计算 layout 树。</p><p>当进行了会影响布局树的操作后。需要重新继续算布局树，会引发 layout？？。</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p><p>也同样因为如此，但 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p><p>浏览器再反复权衡下，最终决定获取属性立即 reflow，保证获取到最新的信息。</p><h2 id="什么是-repaint" tabindex="-1"><strong>什么是 repaint？</strong> <a class="header-anchor" href="#什么是-repaint" aria-label="Permalink to &quot;**什么是 repaint？**&quot;">​</a></h2><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p><p>当改动了可见样式后，就需要重新计算，会引发 repaint。</p><p>由于元素的布局信息也属于可见样式，所以reflow 一定会引起 repaint。</p><h2 id="为什么-transform-效率高" tabindex="-1"><strong>为什么 transform 效率高？</strong> <a class="header-anchor" href="#为什么-transform-效率高" aria-label="Permalink to &quot;**为什么 transform 效率高？**&quot;">​</a></h2><p>应为 transform 既不会影响布局也不会影响绘制指令，它影响的甚至是渲染流程的最后一个【<strong>draw</strong>】阶段。</p><p>由于 draw 阶段在合成线程中，所以 transform 的变法几乎不会影响渲染主线程。反正，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p><h2 id="渲染流程图" tabindex="-1"><strong>渲染流程图</strong> <a class="header-anchor" href="#渲染流程图" aria-label="Permalink to &quot;**渲染流程图**&quot;">​</a></h2><p>渲染主线程： parseHTML - style - layout - layer - paint ---------------------&gt;</p><p>合成主线程：---------------------------------------------------------tiling - raster ------------ draw ---&gt;</p><p>GPU 进程：---------------------------------------------------------------------------- 光栅化 -----------------------&gt;</p>',58),n=[p];function s(l,i,h,d,c,g){return t(),r("div",null,n)}const u=a(o,[["render",s]]);export{m as __pageData,u as default};
