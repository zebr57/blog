import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.CE7GJjuD.js";const u=JSON.parse('{"title":"Vue 常见的优化手段","description":"","frontmatter":{},"headers":[],"relativePath":"posts/vue常见的优化手段.md","filePath":"posts/vue常见的优化手段.md","lastUpdated":1701677815000}'),e={name:"posts/vue常见的优化手段.md"},l=n(`<h1 id="vue-常见的优化手段" tabindex="-1">Vue 常见的优化手段 <a class="header-anchor" href="#vue-常见的优化手段" aria-label="Permalink to &quot;Vue 常见的优化手段&quot;">​</a></h1><p>不要过早优化 因地制宜，见招拆招</p><h2 id="使用-key" tabindex="-1">使用 key <a class="header-anchor" href="#使用-key" aria-label="Permalink to &quot;使用 key&quot;">​</a></h2><p>对于循环生成的列表，应给每个列表项一个稳定且唯一的 key，这有利于在列表变动时，尽量少的删除、新增、更新元素。</p><h2 id="使用冻结的对象" tabindex="-1">使用冻结的对象 <a class="header-anchor" href="#使用冻结的对象" aria-label="Permalink to &quot;使用冻结的对象&quot;">​</a></h2><p>冻结的对象不会被响应化，适用于接受返回只展示、不需要修改的数据，将数据Object.freeze(obj)复制给定义的变量即可。验证 Object.isFrozen(obj)</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>定义非响应式数据，可以在data外层定义， const obj = {}，但也就不能再发生更新了</p></div><h2 id="使用函数式组件" tabindex="-1">使用函数式组件 <a class="header-anchor" href="#使用函数式组件" aria-label="Permalink to &quot;使用函数式组件&quot;">​</a></h2><ul><li><a href="https://cn.vuejs.org/guide/extras/render-function.html#functional-components" target="_blank" rel="noreferrer">Vue3官方文档</a></li><li>Vue 2</li></ul><p>像一些弹窗提示组件比较简单，没有任何状态管理，也没有任何监听传递它的状态，也没有生命周期，实际上，只是接收props的函数，再这样的场景下，我们可以将这样的组件标记为<code>functional</code>，意味着它无状态（没有响应式数据），也没有实例(没有<code>this</code>上下文)。一个函数式组件就像这样</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  functional: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Props 可选的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 为了弥补缺少的实例，提供第二个参数作为上下文</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>添加配置 functional：true</li><li>无状态组件</li><li>vue 不会为它创建实例（vueComponent）</li><li>即没有this，通过第二个参数 context 作为上下文</li></ul><h2 id="使用计算属性" tabindex="-1">使用计算属性 <a class="header-anchor" href="#使用计算属性" aria-label="Permalink to &quot;使用计算属性&quot;">​</a></h2><p>如果模版中某个数据会使用多次，并且该数据是通过计算得到的，使用计算属性以缓存他们； 收集计算属性方法中使用到的响应式数据，保存他们的依赖，在他们发生变化时，重新调用。</p><h2 id="非实时绑定的表单项" tabindex="-1">非实时绑定的表单项 <a class="header-anchor" href="#非实时绑定的表单项" aria-label="Permalink to &quot;非实时绑定的表单项&quot;">​</a></h2><ul><li>当使用<code>v-model</code>绑定一个表单项时，当用户改变表单项的状态时，也会随之改变数据，从而导致<code>vue</code>发生重渲染（rerender），这会带来一些性能的开销。</li><li>我们可以使用<code>lazy</code>修饰符或者不使用<code>v-model</code>的方式来解决问题，但要注意，这可能会导致某一段时间内数据与表单的数据不一致。</li><li><code>v-model</code>监听的是<code>@input</code>事件，<code>v-model.lazy</code>监听的是<code>@change</code>事件</li></ul><h2 id="保持对象应用稳定" tabindex="-1">保持对象应用稳定 <a class="header-anchor" href="#保持对象应用稳定" aria-label="Permalink to &quot;保持对象应用稳定&quot;">​</a></h2><p>在大部分情况下，<code>vue</code>触发<code>rerender</code>的时机是其依赖的数据发生变化 若数据没有发生变化，哪怕给数据重新赋值了，<code>vue</code>也是不会做出任何处理的 下面是<code>vue</code>判断数据有没有发生变化的源码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此，如果需要，只要能保证组件的依赖数据不发生变化，组件就不会重新渲染， 对于原始数据类型，保持其值不变即可 对于复杂数据类型，保持其引用不变即可</p><h2 id="使用-v-show-代替-v-if" tabindex="-1">使用 v-show 代替 v-if <a class="header-anchor" href="#使用-v-show-代替-v-if" aria-label="Permalink to &quot;使用 v-show 代替 v-if&quot;">​</a></h2><p>使用 v-show 可避免频繁 dom 元素的增删改，有利于保持 dom 树稳定，对于包含大量 dom 元素的节点，这一点很重要。</p><h2 id="保持延迟装载-defer" tabindex="-1">保持延迟装载（defer） <a class="header-anchor" href="#保持延迟装载-defer" aria-label="Permalink to &quot;保持延迟装载（defer）&quot;">​</a></h2><p>JS 传输完成后，浏览器开始执行 JS 构造页面<br></p><p>但可能一开始要渲染的组件太多，不仅 JS 执行的时间很长，而且执行完成后浏览器要渲染的元素过多，从而导致页面白屏<br></p><p>一个可行的办法就是<strong>延迟装载组件</strong>，让组件按照指定的先后循序一次一个一个渲染出来</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>延迟装载是一个思路，本质上是利用 requestAnimationFrame 事件分批渲染内容，它的具体实现多种多样，React Fiber 就是利用浏览器渲染帧空余时间去处理。</p></div><h2 id="使用-keep-alive" tabindex="-1">使用 keep-alive <a class="header-anchor" href="#使用-keep-alive" aria-label="Permalink to &quot;使用 keep-alive&quot;">​</a></h2><h2 id="长列表优化" tabindex="-1">长列表优化 <a class="header-anchor" href="#长列表优化" aria-label="Permalink to &quot;长列表优化&quot;">​</a></h2><h2 id="打包体积优化" tabindex="-1">打包体积优化 <a class="header-anchor" href="#打包体积优化" aria-label="Permalink to &quot;打包体积优化&quot;">​</a></h2>`,30),p=[l];function t(h,r,k,d,o,c){return i(),a("div",null,p)}const b=s(e,[["render",t]]);export{u as __pageData,b as default};
