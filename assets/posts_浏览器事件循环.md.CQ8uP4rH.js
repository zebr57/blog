import{_ as i,c as s,o as l,a4 as t}from"./chunks/framework.CE7GJjuD.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/浏览器事件循环.md","filePath":"posts/浏览器事件循环.md","lastUpdated":1700564272000}'),a={name:"posts/浏览器事件循环.md"},p=t('<h2 id="浏览器的进程模型" tabindex="-1"><strong>浏览器的进程模型</strong> <a class="header-anchor" href="#浏览器的进程模型" aria-label="Permalink to &quot;**浏览器的进程模型**&quot;">​</a></h2><h4 id="什么是进程" tabindex="-1"><strong>什么是进程？</strong> <a class="header-anchor" href="#什么是进程" aria-label="Permalink to &quot;**什么是进程？**&quot;">​</a></h4><p>程序运行中需要它自己的内存空间，这块<strong>内存空间</strong>简单的理解为进程。</p><p>每个程序至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p><h4 id="什么是线程" tabindex="-1"><strong>什么是线程？</strong> <a class="header-anchor" href="#什么是线程" aria-label="Permalink to &quot;**什么是线程？**&quot;">​</a></h4><ul><li>运行代码的【人】称之为【线程】</li><li>一个进程至少有一个线程，进程开启时都会开启一个主线程来运行代码，如果同时需要运行多块代码，主线程就会开启多个线程来执行代码，所以一个进程中可以包含多个线程。</li></ul><h4 id="浏览器有什么进程和线程" tabindex="-1"><strong>浏览器有什么进程和线程</strong>？ <a class="header-anchor" href="#浏览器有什么进程和线程" aria-label="Permalink to &quot;**浏览器有什么进程和线程**？&quot;">​</a></h4><p>浏览器时一个多进程多线程的应用程序，内部工作及其复杂。</p><p>为了避免互相影响，为了减少连环崩溃的概率，当浏览器启动时，它会自动启动多个进程。</p><p>主要有：浏览器进程、网络进程、渲染进程...（更多工具-任务管理器中可查看当前浏览器所有进程）</p><ol><li><p>浏览器进程：</p><p> 负责界面显示、用户交互、子进程管理。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>网络进程：</p><p>负责加载网络资源。网络进程内部会启用多个进程来处理不同的网络任务。（输入网址请求页面多种资源）</p></li><li><p><strong>渲染进程：（重点）</strong></p><p>渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML\\CSS\\JS 代码。</p><p>默认情况下，浏览器会为每个标签开启一个新的进程，以保证不用的标签页之间不会相互影响。</p><p>即每个 tab 都是一个线程（process-pre-tab），chrome 以后可能会修改为一个站点开一个进程 （process-pre-site)</p></li></ol><h2 id="渲染主线程是如何工作的" tabindex="-1"><strong>渲染主线程是如何工作的？</strong> <a class="header-anchor" href="#渲染主线程是如何工作的" aria-label="Permalink to &quot;**渲染主线程是如何工作的？**&quot;">​</a></h2><p>渲染主线程时浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒绘制页面 60 次</li><li>执行全局 JS 代码</li><li>执行事件的处理函数</li><li>执行计时器的回调函数</li><li>......</li></ul><p>要处理这么多任务，主线程则面对一个无法避免的难题，该如何调度任务？</p><p>比如： </p><ul><li>我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数。</li><li>我正在执行一个 JS 函数，执行到一半的时候某个定时器到达了时间，我该立即去执行它的回调函数。</li><li>浏览器进程通知主线程用户点击了按钮，于此同时，某个计时器也到达了时间，我该如何处理哪一个呢？</li><li>......</li></ul><p>于是主线程想出一个绝妙的主意来处理这个问题： 排队！</p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环都会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行玩一个后进入下一次循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他的进程）可以随时向消息队列添加任务，新任务会加到消息队列的末尾。在添加新任务时，如果主进程是休眠状态，则会将其唤醒以继续循环拿取任务。</li></ol><p>这样一来，所有任务都可以有序不乱的、持续的进行下去。</p><p><strong>这整个过程，被称之为事件循环（消息循环）</strong></p><h2 id="若干解释" tabindex="-1"><strong>若干解释</strong> <a class="header-anchor" href="#若干解释" aria-label="Permalink to &quot;**若干解释**&quot;">​</a></h2><h4 id="什么是异步" tabindex="-1"><strong>什么是异步？</strong> <a class="header-anchor" href="#什么是异步" aria-label="Permalink to &quot;**什么是异步？**&quot;">​</a></h4><p>代码执行过程中，会遇到一些无法立即执处理的任务，比如：</p><ul><li>计时器完成后需要执行的任务 -- setTimeout、setInterval</li><li>网络通信完成后需要执行的任务 -- XHR、Fetch</li><li>用户操作后需要执行的任务 -- addEventListener</li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程一段时间内处于【阻塞】状态，从而导致浏览器【卡死】。</p><p><strong>渲染主线程承担着大任，绝不能倒下！</strong></p><p>因此，浏览器选择异步来解决这个麻烦，使渲染主线程永不阻塞。</p><div class="tip custom-block"><p class="custom-block-title">面试题：如何理解 JS 的异步?</p><p>JS 是一门单线程的语言，运行在渲染主线程中，而渲染主线程只有一个。</p><p>而渲染主线承担着诸多工作：渲染页面、 js 都在其中运行</p><p>如果使用同步的方式，就极有可能造成主线程阻塞，从而导致消息队列中的很多其他任务无法执行。</p><p>这样一来，一方面会导致繁忙的主线程白白浪费时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免，具体做法是当某些任务发生时，比如定时器、网络、时间监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行下一个任务，当其他线程完成时，将事先传递的<strong>回调函数包装成任务</strong>，加到消息队列的末尾排队，等待主线程调度即可。</p><p>在这中异步模式下，浏览器用不阻塞，从而最大限度的保证了单线程的流畅运行。</p></div><h4 id="js-为何会阻塞渲染" tabindex="-1"><strong>JS 为何会阻塞渲染</strong> <a class="header-anchor" href="#js-为何会阻塞渲染" aria-label="Permalink to &quot;**JS 为何会阻塞渲染**&quot;">​</a></h4><p>由于 JS 运行再渲染主线程中，又因为渲染主线程是单线程，所以会阻塞</p><p>在 JS 代码中修改 DOM 元素，需要等该任务执行完，再调用绘制任务</p><h4 id="任务有优先级吗" tabindex="-1"><strong>任务有优先级吗</strong> <a class="header-anchor" href="#任务有优先级吗" aria-label="Permalink to &quot;**任务有优先级吗**&quot;">​</a></h4><p>任务没有优先级，都是先进先出</p><p><strong>但是消息队列是有优先级的</strong></p><p>w3c 最新解释：</p><ul><li>不再以单单一个宏任务的说法来区分了。</li><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以放在不同的队列，在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先于所有其他任务执行。</li></ul><p>在目前 chrome 的实现中，至少包含了以下的队列：</p><ul><li>延时队列：用于存放定时器到达后的回调任务，优先级【中】</li><li>交互队列：用于存放用户操作后产生的回调任务，优先级【高】（用户交互体验最为重要）</li><li>微队列：用户存放需要最快执行的任务，优先级【最高】</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>添加任务到微队列主要方式有：Promise、MutationObserver（在 DOM 中监视 DOM 节点变化时触发的微任务 - baidu）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接将fn添加到微队列中</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><div class="tip custom-block"><p class="custom-block-title">阐述一下 JS 事件队列</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 源码中，它开启一个不会结束的 for( ; ; ) 循环，每次循环从消息队列中取出每第一个任务来执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为<strong>宏队列</strong>与**微队列，**这种说法目前已经无法满足复杂的浏览器环境，而取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方解释，每个任务有不同的类型，同类型的任务必须在同一个队列中，不同的任务队列可以属于不同的队列？？。不同任务任务队列有不同优先级，在每一次事件循环中，由浏览器自行决定取哪一个队列的任务，但浏览器必须要有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p></div><div class="tip custom-block"><p class="custom-block-title">JS 中的计时器能做到精确计时吗？为什么？</p><p>参考： 不行</p><ol><li>计算机硬件没有原始钟，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终<strong>调用的是操作系统的函数</strong>，也就携带了这些偏差（如 windows 和 Mac）</li><li>按照 w3c 的标准，浏览器实现计时器时，<strong>嵌套超过 5 层，默认带有 4 毫秒</strong>的最少时间，在计时时间少于 4 毫秒时又带来偏差。</li><li>受事件循环影响，计时器的回调函数只能在<strong>主线程空闲时间运行</strong>，因此也会带来偏差。</li></ol><p>** 单线程时异步产生的原因，事件循环是实现异步的方式**</p></div><p>学习视频：<a href="https://ke.qq.com/course/5892689/13883864042302033#term_id=106109971" target="_blank" rel="noreferrer">https://ke.qq.com/course/5892689/13883864042302033#term_id=106109971</a></p><p>图模型：</p><p>渲染主线程</p><p>微任务队列</p><p>计时器队列</p><p>交互队列</p><p> 其他线程</p>',49),e=[p];function o(r,n,h,c,d,u){return l(),s("div",null,e)}const m=i(a,[["render",o]]);export{k as __pageData,m as default};
